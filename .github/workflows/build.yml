
name: Build Windows EXE (CHAP1_v23)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Ensure folders and placeholder files
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path assets | Out-Null
          New-Item -ItemType Directory -Force -Path data | Out-Null
          if (-not (Test-Path assets\chap1_provided.png)) {
            # minimal placeholder if user forgot to commit PNG
            Add-Content -Path assets\chap1_provided.png -Value ""
          }
          if (-not (Test-Path data\.gitkeep)) {
            Add-Content -Path data\.gitkeep -Value ""
          }

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install pyinstaller pillow

      - name: Convert provided PNG to ICO (PowerShell here-string)
        shell: pwsh
        run: |
          $code = @"
from PIL import Image
from pathlib import Path
p = Path('assets/chap1_provided.png')
if p.exists() and p.stat().st_size > 0:
    img = Image.open(p).convert('RGBA')
    sizes = [(16,16),(32,32),(48,48),(64,64),(128,128),(256,256)]
    img.save('assets/chap1.ico', sizes=sizes)
    print('ICO created at assets/chap1.ico')
else:
    print('No provided PNG, skipping ICO conversion.')
"@
          $code | Set-Content -Path convert_ico.py -Encoding UTF8
          python convert_ico.py

      - name: Install UPX (safe fallback if choco fails)
        shell: pwsh
        run: |
          try { choco install upx -y; $UPX=(Get-Command upx -ErrorAction SilentlyContinue).Source } catch { $UPX=$null }
          if (-not $UPX) {
            $url = "https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-win64.zip"
            $zip = "$env:TEMP\\upx.zip"
            Invoke-WebRequest -Uri $url -OutFile $zip
            Expand-Archive $zip -DestinationPath $env:TEMP\\upx -Force
            $upxpath = Get-ChildItem $env:TEMP\\upx -Recurse -Filter upx.exe | Select-Object -First 1 -ExpandProperty FullName
            echo "$upxpath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            echo (Get-Command upx).Source | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

      - name: PyInstaller build (no UPX on libs, include assets & data)
        shell: cmd
        run: |
          python -m PyInstaller --noconsole --onefile --name CHAP1_v23 --icon assets/chap1.ico ^
            --noupx ^
            --hidden-import sounddevice ^
            --hidden-import faster_whisper ^
            --hidden-import ctranslate2 ^
            --collect-all faster_whisper ^
            --collect-all ctranslate2 ^
            --collect-all sounddevice ^
            --collect-submodules numpy ^
            --exclude-module numpy.tests ^
            --exclude-module pip ^
            --add-data "assets;assets" ^
            --add-data "data;data" ^
            run.py

      - name: Compress EXE with UPX (safe)
        shell: cmd
        run: |
          upx --best --lzma "dist\CHAP1_v23.exe"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: CHAP1_v23
          path: dist/CHAP1_v23.exe
